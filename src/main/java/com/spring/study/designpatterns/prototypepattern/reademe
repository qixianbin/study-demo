原型模式：用一个已经创建的实例作为原型，通过复制该对象来创建一个相同的新对象。
    结构：
        抽象原型类：规定原型对象必须实现的clone方法
        具体原型类：实现抽象原型类的clone方法
        访问类：使用原型类中的clone方法复制对象
    深拷贝：创建一个新对象，新对象的属性和原来的相同，引用类型也进行克隆不在指向原对象中引用类型指向的内存地址
        需要注意一个对象中的属性中包含对象本身时，不能采用clone的方式实现深拷贝，只能用序列化的方式
        实现方式：
            1、每个对象属性也都实现clone，并且在最外层clone方法中调用对象属性的clone
            2、每个对象实现序列化接口（Serializable）    推荐使用
    浅拷贝：创建一个新对象，新对象的属性和原来的相同，不过对于引用类型（String、基本类型包装类除外）仍指向原对象中引用类型指向的内存地址
        因为String和基本类型的包装类都是不可变的，更改String变量的值时，其实是在堆中新建一个String对象，然后将变量的引用指向新的String对象，原String对象仍在堆中
        浅拷贝用clone即可实现
    优点：创建对象复杂时，该模式可以提高创建效率
    缺点：对已有的类改造时，可能需要修改源代码，clone方式违反开闭原则