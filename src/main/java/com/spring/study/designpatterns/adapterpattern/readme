适配器模式：
    将一个类的接口转换成客户端希望的另一个接口，使得原本由于接口不兼容而不能一起工作的类能一起工作。
    分类：
        类适配器：适配器类继承被适配者类，耦合度高，且需要开发者了解适配者类的内部结构，应用较少
        对象适配器：不用继承被适配者类，使用聚合的形式，耦合度低，常用
        接口适配器：用抽象类先对目标接口进行空实现，然后用适配器类继承抽象类，对需要适配的方法进行重写
    结构：
        目标接口：当前系统期待的接口，可以是抽象类或者接口
        被适配者类：现有的组件接口
        适配器类：转换器，将适配者类转换为目标接口
    类适配器：
        需要继承适配者类，实现目标接口，如果目标对象不是接口的话无法使用
    对象适配器：
        不需要继承，使用聚合的方式将适配者类聚合到适配器中，解决了必须继承的问题
    接口适配器：
        目标接口中有多个方法，但是适配器类不关注所有的方法，可以创建一个抽象适配器类实现目标接口并对所有方法进行空实现，
        适配器类继承抽象适配器类实现具体需要适配的方法
    SpringMVC中用到了适配器模式：





