工厂模式有三种：
    简单（静态）工厂模式：
        结构：
            具体工厂：生产产品
            抽象产品：产品接口
            具体产品：实现产品接口
        优点：产品的创建交给一个工厂，封装创建对象的过程，增加产品的话直接修改工厂类，避免了修改客户端代码
        缺点：违反开闭原则
    工厂方法模式：
        定义一个创建对象的抽象方法，由子类决定要实例化的对象，将对象的实例化推迟到子类中。
        结构：
            抽象工厂：提供创建产品的接口
            具体工厂：实现抽象工厂，完成创建产品
            抽象产品：产品接口
            具体产品：实现产品接口
        优点：新加一个产品的话，增加一个工厂的实现类即可，不用修改原来的工厂类，遵循开闭原则
        缺点：增加一个产品的话需要增加一个对应的工厂，增加了复杂度，产品多的话会造成类爆炸
    抽象工厂模式：
        抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象，有产品族的概念。所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族。抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法提供的一系列产品称为一个等级结构。
        比如小米工厂生产小米手机，小米电脑，三星工厂生产三星手机，三星电脑
        结构：
            抽象工厂：包含同一个产品族的多个创建方法
            具体工厂：实现抽象工厂，完成创建产品
            抽象产品：产品接口
            具体产品：实现产品接口
        优点：增加一个产品族的话，直接增加一个工厂类即可
        缺点：

        它与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构。
        在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类。
        抽象工厂模式可生产违背了单一职责原则